{"version":3,"sources":["Modhash.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;sBAAmB,QAAQ;;;;oBAEV,MAAM;;;;qBAEJ,SAAS;;IAAhB,CAAC;;wBAEQ,YAAY;;;;6BACP,iBAAiB;;;;IAEtB,OAAO;YAAP,OAAO;;AAEf,WAFQ,OAAO,CAEd,UAAU,EAAE,OAAO,EAAE;0BAFd,OAAO;;AAGxB,+BAHiB,OAAO,6CAGhB;;AAER,QAAI,CAAC,WAAW,GAAG,UAAU,CAAC;;AAE9B,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;;AAExB,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;GAC3B;;eAXkB,OAAO;;WAad,wBAAG;;AAEb,UAAI,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;;AAE7B,aAAO,AAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,gBAAgB,GAAI,OAAO,CAAC;KACvD;;;WAES,oBAAC,OAAO,EAAE;AAClB,UAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,UAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KACpC;;;WAES,sBAAG;AACX,aAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;KAC9B;;;;;;;WAKgB,6BAAG;AAClB,UAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;AACtB,eAAO,SAAS,CAAC;OAClB;AACD,aAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;WAEa,0BAAG;;;AACf,UAAI,QAAQ,GAAG,0BAAa,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,WAAW,CAAC,SAAS,EAC1B,KAAK,EACL,cAAc,EACd,EAAE,EACF,EAAE,EACF,EAAE,EACF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;;AAE5D,UAAI,oBAAoB,GAAG,SAAvB,oBAAoB,CAAI,QAAQ,EAAE,QAAQ,EAAK;AACjD,YAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AAC/C,iBAAO,kBAAK,MAAM,CAAC,+BACjB,gCAAgC,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC1D;;AAED,eAAO,kBAAK,OAAO,CAAC,QAAQ,CAAC,CAAC;OAC/B,CAAC;;AAEF,aAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,EAAI;AACrE,YAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;AAErC,YAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;AAClB,gBAAM,+BACJ,qDAAqD,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC9E,MAAM;AACL,gBAAK,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;AAEvC,iBAAO;AACL,mBAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO;WAC/B,CAAC;SACH;OACF,CAAC,CAAC;KACJ;;;WAES,sBAAG;AACX,UAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;AACxB,eAAO,kBAAK,OAAO,CAAC;AAClB,iBAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CAAC;OACJ,MAAM;AACL,eAAO,IAAI,CAAC,cAAc,EAAE,CAAC;OAC9B;KACF;;;SAlFkB,OAAO;GAAS,oBAAO,YAAY;;qBAAnC,OAAO","file":"Modhash.js","sourcesContent":["import events from 'events';\n\nimport when from 'when';\n\nimport * as u from './utils';\n\nimport Endpoint from './Endpoint';\nimport ResponseError from './ResponseError';\n\nexport default class Modhash extends events.EventEmitter {\n\n  constructor(userConfig, request) {\n    super();\n\n    this._userConfig = userConfig;\n\n    this._request = request;\n\n    this.modhash = '';\n    this.modhashRefreshed = 0;\n  }\n\n  isModhashOld() {\n    // 10 minutes by default\n    let timeout = 10 * 60 * 1000;\n\n    return (Date.now() - this.modhashRefreshed) > timeout;\n  }\n\n  setModhash(modhash) {\n    this.modhash = modhash;\n    this.modhashRefreshed = Date.now();\n  }\n\n  hasModhash() {\n    return !!this.modhash.length;\n  }\n\n  /*\n     Get the current cached modhash.\n   */\n  getCurrentModhash() {\n    if (!this.hasModhash()) {\n      return undefined;\n    }\n    return this.modhash;\n  }\n\n  refreshModhash() {\n    let endpoint = new Endpoint(this._userConfig,\n                                this._userConfig.serverWWW,\n                                'get',\n                                '/api/me.json',\n                                {},\n                                {},\n                                {},\n                                this._userConfig.serverWWWPort);\n\n    let responseErrorHandler = (response, endpoint) => {\n      if (String(response._status).indexOf('4') === 0) {\n        return when.reject(new ResponseError(\n          'Invalid refreshModhash request', response, endpoint));\n      }\n      // else return the endpoint to try again\n      return when.resolve(endpoint);\n    };\n    \n    return this._request.https(endpoint, responseErrorHandler).then(res => {\n      let response = JSON.parse(res._body);\n\n      if (!response.data) {\n        throw new ResponseError(\n          'Invalid refreshModhash response. Are you logged in?', response, endpoint);\n      } else {\n        this.setModhash(response.data.modhash);\n\n        return {\n          modhash: response.data.modhash\n        };\n      }\n    });\n  }\n\n  getModhash() {\n    if (!this.isModhashOld()) {\n      return when.resolve({\n        modhash: this.modhash\n      });\n    } else {\n      return this.refreshModhash();\n    }\n  }\n}"],"sourceRoot":"/source/"}