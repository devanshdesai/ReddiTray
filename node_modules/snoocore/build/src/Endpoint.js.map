{"version":3,"sources":["Endpoint.js"],"names":[],"mappings":"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","file":"Endpoint.js","sourcesContent":["import urlLib from 'url';\n\nimport * as u from './utils';\n\nexport default class Endpoint {\n\n  constructor(userConfig,\n              hostname, method, path, headers={},\n              givenArgs={}, givenContextOptions={}, port=80)\n  {\n    this._userConfig = userConfig;\n\n    this.hostname = hostname;\n    this.port = port;\n    this.method = method;\n    this.path = path;\n    this.headers = headers;\n\n    this.contextOptions = this.normalizeContextOptions(givenContextOptions);\n\n    this.givenArgs = givenArgs;\n    this.args = this.buildArgs();\n    this.url = this.buildUrl();\n    this.computedPath = urlLib.parse(this.url).path;\n  }\n\n  setHeaders(headers) {\n    this.headers = headers;\n  }\n\n  /*\n     Returns a set of options that effect how each call to reddit behaves.\n   */\n  normalizeContextOptions(givenContextOptions) {\n\n    let cOptions = givenContextOptions || {};\n\n    // by default we do not bypass authentication\n    cOptions.bypassAuth = u.thisOrThat(cOptions.bypassAuth, false);\n\n    // decode html enntities for this call?\n    cOptions.decodeHtmlEntities = u.thisOrThat(cOptions.decodeHtmlEntities,\n                                               this._userConfig.decodeHtmlEntities);\n\n    // how many attempts left do we have to retry an endpoint?\n\n    // use the given retryAttemptsLeft, or the retryAttempts passed in the\n    // context options if not specified\n    cOptions.retryAttemptsLeft = u.thisOrThat(cOptions.retryAttemptsLeft,\n                                              cOptions.retryAttempts);\n\n    // use the given retryAttemptsLeft, or the retryAttempts passed in the\n    // user configuration\n    cOptions.retryAttemptsLeft = u.thisOrThat(cOptions.retryAttemptsLeft,\n                                              this._userConfig.retryAttempts);\n\n    // delay between retrying an endpoint\n    cOptions.retryDelay = u.thisOrThat(cOptions.retryDelay,\n                                       this._userConfig.retryDelay);\n\n    // milliseconds before a request times out\n    cOptions.requestTimeout = u.thisOrThat(cOptions.requestTimeout,\n                                           this._userConfig.requestTimeout);\n\n    // how many reauthentication attempts do we have left?\n    cOptions.reauthAttemptsLeft = u.thisOrThat(cOptions.reauthAttemptsLeft,\n                                               cOptions.retryAttemptsLeft);\n\n    return cOptions;\n  }\n\n  /*\n     Build the arguments that we will send to reddit in our\n     request. These customize the request that we send to reddit\n   */\n  buildArgs() {\n    let args = {};\n\n    // Skip any url parameters (e.g. items that begin with $)\n    for (let key in this.givenArgs) {\n      if (key.substring(0, 1) !== '$') {\n        args[key] = this.givenArgs[key];\n      }\n    }\n\n    let apiType = u.thisOrThat(this.contextOptions.api_type,\n                               this._userConfig.apiType);\n\n    if (apiType) {\n      args.api_type = apiType;\n    }\n\n    return args;\n  }\n\n  /*\n     Builds the URL that we will query reddit with.\n   */\n  buildUrl() {\n    let url = this.hostname;\n\n    if (this.port !== 80) {\n      url += ':' + this.port;\n    }\n\n    let path = this.path;\n    if (path.substring(0, 1) !== '/') {\n      path = '/' + path;\n    }\n\n    url += path;\n\n    url = replaceUrlParams(url, this.givenArgs);\n    url = url.replace('//', '/');\n    url = 'https://' + url;\n    return url;\n  }\n\n}\n\n\n/*\n   Takes an url, and an object of url parameters and replaces\n   them, e.g.\n\n   endpointUrl:\n   'http://example.com/$foo/$bar/test.html'\n\n   this.givenArgs: { $foo: 'hello', $bar: 'world' }\n\n   would output:\n\n   'http://example.com/hello/world/test.html'\n */\nexport function replaceUrlParams(endpointUrl, givenArgs) {\n  // nothing to replace!\n  if (endpointUrl.indexOf('$') === -1) {\n    return endpointUrl;\n  }\n\n  // pull out variables from the url\n  let params = endpointUrl.match(/\\$[\\w\\.]+/g);\n\n  // replace with the argument provided\n  params.forEach(param => {\n    if (typeof givenArgs[param] === 'undefined') {\n      throw new Error('missing required url parameter ' + param);\n    }\n    endpointUrl = endpointUrl.replace(param, givenArgs[param]);\n  });\n\n  return endpointUrl;\n}\n"],"sourceRoot":"/source/"}