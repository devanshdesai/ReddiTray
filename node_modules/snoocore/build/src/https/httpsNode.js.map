{"version":3,"sources":["https/httpsNode.js"],"names":[],"mappings":";;;;;;;;;qBAiBwB,KAAK;;;;;;qBAbR,OAAO;;;;mBACT,KAAK;;;;oBAEP,MAAM;;;;oBAED,QAAQ;;IAAlB,IAAI;;;AAGhB,IAAI,SAAS,GAAG,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,YAAI,EAAE,CAAC;;;;;;AAKhC,SAAS,KAAK,CAAC,OAAO,EAAE,QAAQ,EAAE;AAC/C,WAAS,CAAC,UAAU,CAAC,CAAC;AACtB,WAAS,CAAC,gBAAgB,GAChB,OAAO,CAAC,MAAM,GAAG,IAAI,GACrB,OAAO,CAAC,QAAQ,GAChB,OAAO,CAAC,IAAI,CAAC,CAAC;;AAExB,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,SAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;;AAExC,UAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;;AAE1B,MAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAElC,SAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;;AAEnD,MAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;AAC5B,WAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC;GACxD;;AAED,WAAS,CAAC,yBAAyB,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;;;AAGtD,MAAI,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE;AAC7D,aAAS,CAAC,uBAAuB,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC3D,WAAO,CAAC,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;GAC9C;;AAED,SAAO,kBAAK,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;;AAE5C,QAAI,GAAG,GAAG,mBAAS,OAAO,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;;AAEhD,SAAG,CAAC,IAAI,GAAG,GAAG,CAAC;;AAEf,SAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACxB,UAAI,IAAI,GAAG,EAAE,CAAC;AACd,SAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,KAAK,EAAI;AAAE,eAAO,MAAM,CAAC,KAAK,CAAC,CAAC;OAAE,CAAC,CAAC;AACpD,SAAG,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,KAAK,EAAI;AAAE,YAAI,IAAI,KAAK,CAAC;OAAE,CAAC,CAAC;AAC5C,SAAG,CAAC,EAAE,CAAC,KAAK,EAAE,YAAM;AAClB,WAAG,CAAC,KAAK,GAAG,IAAI,CAAC;AACjB,WAAG,CAAC,OAAO,GAAG,GAAG,CAAC,UAAU,CAAC;AAC7B,WAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC;AAC3B,iBAAS,CAAC,2BAA2B,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;AACrD,iBAAS,CAAC,wBAAwB,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AACrE,iBAAS,CAAC,iBAAiB,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;AAC7C,eAAO,OAAO,CAAC,GAAG,CAAC,CAAC;OACrB,CAAC,CAAC;KACJ,CAAC,CAAC;;AAEH,OAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,KAAK,EAAI;AAAE,aAAO,MAAM,CAAC,KAAK,CAAC,CAAC;KAAE,CAAC,CAAC;;AAEpD,QAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;AAC5B,eAAS,CAAC,uBAAuB,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC3D,SAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;;AAED,OAAG,CAAC,GAAG,EAAE,CAAC;GAEX,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,EAAI;AACb,QAAI,WAAW,GAAI,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,IAC5D,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,KAAK,WAAW,AAAC,CAAC;;AAEhD,QAAI,WAAW,EAAE;;AAEf,UAAI,MAAM,GAAG,iBAAO,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACjD,aAAO,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AACnC,aAAO,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC/B,aAAO,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;KACrC;;AAED,WAAO,GAAG,CAAC;GACZ,CAAC,CAAC;CAEJ","file":"https/httpsNode.js","sourcesContent":["//\n// Node requests\n//\n\nimport httpsLib from 'https';\nimport urlLib from 'url';\n\nimport when from 'when';\n\nimport * as form from './form';\n\n// Set to true to print useful http debug information on a lower level\nlet DEBUG_LOG = false ? console.error : ()=>{};\n\n/*\n   Form data can be a raw string, or an object containing key/value pairs\n */\nexport default function https(options, formData) {\n  DEBUG_LOG('\\n\\n\\n\\n');\n  DEBUG_LOG('>>> request:\\n' +\n            options.method + ': ' +\n            options.hostname +\n            options.path);\n\n  options = options || {};\n  options.headers = options.headers || {};\n\n  formData = formData || [];\n\n  let data = form.getData(formData);\n\n  options.headers['Content-Type'] = data.contentType;\n\n  if (options.method !== 'GET') {\n    options.headers['Content-Length'] = data.contentLength;\n  }\n\n  DEBUG_LOG('\\n>>> request headers\\n', options.headers);\n\n  // stick the data at the end of the url for GET requests\n  if (options.method === 'GET' && data.buffer.toString() !== '') {\n    DEBUG_LOG('\\n>>> query string:\\n', data.buffer.toString());\n    options.path += '?' + data.buffer.toString();\n  }\n\n  return when.promise(function(resolve, reject) {\n\n    let req = httpsLib.request(options, function(res) {\n\n      res._req = req; // attach a reference back to the request\n\n      res.setEncoding('utf8');\n      let body = '';\n      res.on('error', error => { return reject(error); });\n      res.on('data', chunk => { body += chunk; });\n      res.on('end', () => {\n        res._body = body; // attach the response body to the object\n        res._status = res.statusCode;\n        res._headers = res.headers;\n        DEBUG_LOG('\\n>>> response headers:\\n', res._headers);\n        DEBUG_LOG('\\n>>> response body:\\n', String(body).substring(0, 1000));\n        DEBUG_LOG('\\n>>> status:\\n', res.statusCode);\n        return resolve(res);\n      });\n    });\n\n    req.on('error', error => { return reject(error); });\n\n    if (options.method !== 'GET') {\n      DEBUG_LOG('\\n>>> request body:\\n', data.buffer.toString());\n      req.write(data.buffer);\n    }\n\n    req.end();\n\n  }).then(res => {\n    let canRedirect = (String(res._status).substring(0, 1) === '3' &&\n      typeof res._headers.location !== 'undefined');\n\n    if (canRedirect) {\n      // Make the call again with the new hostname, path, and form data\n      let parsed = urlLib.parse(res._headers.location);\n      options.hostname = parsed.hostname;\n      options.path = parsed.pathname;\n      return https(options, parsed.query);\n    }\n\n    return res;\n  });\n\n}\n"],"sourceRoot":"/source/"}