{"version":3,"sources":["https/httpsBrowser.js"],"names":[],"mappings":"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","file":"https/httpsBrowser.js","sourcesContent":["//\n// Browser requests, mirrors the syntax of the node requests\n//\n\nimport urlLib from 'url';\n\nimport when from 'when';\n\nimport * as form from './form';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#getAllResponseHeaders()\n\n// Set to true to print useful http debug information on a lower level\nlet DEBUG_LOG = false ? console.error : ()=>{};\n\n/**\n * Modified from https://gist.github.com/monsur/706839\n *\n * XmlHttpRequest's getAllResponseHeaders() method returns a string of response\n * headers according to the format described here:\n * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method\n * This method parses that string into a user-friendly key/value pair object.\n */\nfunction parseResponseHeaders(headerStr) {\n  let headers = {};\n  if (!headerStr) {\n    return headers;\n  }\n  let headerPairs = headerStr.split('\\u000d\\u000a');\n  for (let i = 0, len = headerPairs.length; i < len; i++) {\n    let headerPair = headerPairs[i];\n    // Can't use split() here because it does the wrong thing\n    // if the header value has the string \": \" in it.\n    let index = headerPair.indexOf('\\u003a\\u0020');\n    if (index > 0) {\n      // make all keys lowercase\n      let key = headerPair.substring(0, index).toLowerCase();\n      let val = headerPair.substring(index + 2);\n      headers[key] = val;\n    }\n  }\n  return headers;\n}\n\nexport default function https(options, formData) {\n\n  DEBUG_LOG('>> browser https call');\n\n  options = options || {};\n  options.headers = options.headers || {};\n\n  var data;\n\n  if (formData.file) {\n    data = form.getFormData(formData);\n  } else {\n    data = form.getData(formData);\n    options.headers['Content-Type'] = data.contentType;\n  }\n\n  return when.promise((resolve, reject) => {\n\n    try {\n      if (options.method === 'GET' && data instanceof FormData) {\n        return reject(new Error(\n          'Cannot make a GET request while handling a file!'));\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n      var x = new window.XMLHttpRequest();\n\n      var url = 'https://' + options.hostname + options.path;\n\n      DEBUG_LOG('>> url: ', url);\n\n      // append the form data to the end of the url\n      if (options.method === 'GET') {\n        url += '?' + data.buffer.toString();\n      }\n\n      x.open(options.method, url, true);\n\n      if (options.useBrowserCookies) {\n        x.withCredentials = true;\n      }\n\n      Object.keys(options.headers).forEach(headerKey => {\n        x.setRequestHeader(headerKey, options.headers[headerKey]);\n      });\n\n      x.onreadystatechange = () => {\n        if (x.readyState > 3) {\n          // Normalize the result to match how requestNode.js works\n\n          DEBUG_LOG('finished...', x.status);\n\n          return resolve({\n            _body: x.responseText,\n            _status: x.status,\n            _headers: parseResponseHeaders(x.getAllResponseHeaders())\n          });\n        }\n      };\n\n      if (data instanceof FormData) {\n        x.send(data);\n      } else {\n        x.send(options.method === 'GET' ? null : data.buffer.toString());\n      }\n\n    } catch (e) {\n      return reject(e);\n    }\n\n  }).then(res => {\n    let canRedirect = (String(res._status).substring(0, 1) === '3' &&\n      typeof res._headers.location !== 'undefined');\n\n    if (canRedirect) {\n      // Make the call again with the new hostname, path, and form data\n      let parsed = urlLib.parse(res._headers.location);\n      options.hostname = parsed.hostname;\n      options.path = parsed.pathname;\n      return https(options, parsed.query);\n    }\n\n    return res;\n  });\n}\n"],"sourceRoot":"/source/"}