{"version":3,"sources":["https/form.js"],"names":[],"mappings":"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","file":"https/form.js","sourcesContent":["\nimport querystring from 'querystring';\n\nimport when from 'when';\n\nexport function getSectionBoundary(boundary) {\n  return '--' + boundary;\n}\n\nexport function getEndBoundary(boundary) {\n  return '--' + boundary + '--';\n}\n\nexport function encodeFieldPart(boundary, key, value) {\n  return new Buffer([\n    getSectionBoundary(boundary),\n    '\\r\\n',\n    'Content-Disposition: form-data; name=\"' + key + '\"',\n    '\\r\\n\\r\\n',\n    value,\n    '\\r\\n'\n  ].join(''));\n}\n\nexport function encodeFilePart(boundary, key, name, mimeType, data) {\n  return Buffer.concat([\n    new Buffer([\n      getSectionBoundary(boundary),\n      '\\r\\n',\n      ('Content-Disposition: form-data; ' +\n       'name=\"' + key + '\"; ' +\n       'filename=\"' + name + '\"'),\n      '\\r\\n',\n      'Content-Type: ' + mimeType,\n      '\\r\\n\\r\\n'\n    ].join('')),\n    data, // already a buffer\n    new Buffer('\\r\\n')\n  ]);\n}\n\n/*\n   Converts a list of parameters to form data\n\n   - `fields` - a property map of key value pairs\n   - `files` - a list of property maps of content\n   --> `type` - the type of file data\n   --> `keyname` - the name of the key corresponding to the file\n   --> `valuename` - the name of the value corresponding to the file\n   --> `dataBuffer` - A buffer containing the files data\n */\nexport function getMultipartFormData(boundary, fields, files) {\n\n  var dataBuffer = new Buffer(0);\n  var key;\n\n  if (fields) {\n    for (key in fields) {\n      // skip over any file fields\n      if (key === 'file') { continue; }\n\n      var value = fields[key];\n\n      dataBuffer = Buffer.concat([\n        dataBuffer, encodeFieldPart(boundary, key, value)\n      ]);\n    }\n  }\n\n  if (files) {\n    for (key in files) {\n      var file = files[key];\n\n      dataBuffer = Buffer.concat([\n        dataBuffer,\n        encodeFilePart(boundary,\n                       file.key,\n                       file.name,\n                       file.mimeType,\n                       file.data)\n      ]);\n    }\n  }\n\n  // close with a final boundary closed with '--' at the end\n  dataBuffer = Buffer.concat([\n    dataBuffer,\n    new Buffer(getEndBoundary(boundary))\n  ]);\n\n  return dataBuffer;\n}\n\n/*\n   Takes an existing string or key-value pair that represents form data\n   and returns form data in the form of an Array.\n\n   If the formData is an object, and that object has a 'file' key,\n   we will assume that it is going to be a multipart request and we\n   will also assume that the file is actually a file path on the system\n   that we wish to use in the multipart data.\n */\nexport function getData(formData) {\n\n  var data = {\n    contentType: 'application/x-www-form-urlencoded',\n    contentLength: 0,\n    buffer: new Buffer(0)\n  };\n\n  // The data is already in a string format. There is nothing\n  // to do really\n  if (typeof formData === 'string') {\n    data.buffer = new Buffer(formData);\n  }\n\n  if (typeof formData === 'object') {\n    // The data is an object *without* a file key. We will assume\n    // that we want this data in an url encoded format\n    if (!formData.file) {\n      data.buffer = new Buffer(querystring.stringify(formData));\n    } else {\n      // for now we only have to handle one file, with one key name of 'file'\n      var singleFile = formData.file;\n      singleFile.key = 'file';\n\n      var files = [ formData.file ];\n\n      var boundary = '---------Snoocore' + Math.floor(Math.random() * 10000);\n      data.contentType = 'multipart/form-data; boundary=' + boundary;\n      data.buffer = getMultipartFormData(boundary, formData, files);\n    }\n  }\n\n  data.contentLength = data.buffer.length;\n  return data;\n}\n\n/*\n   Takes an key-value pair and turns them into a FormData object. This is for when\n   we want to upload a file using XMLHttpRequest.\n*/\n\nexport function getFormData(formData) {\n  var data = new FormData();\n\n  for (var key in formData) {\n    if (key === 'file') {\n      data.append(key, formData[key].data, formData[key].name);\n    } else {\n      data.append(key, formData[key]);\n    }\n  }\n\n  return data;\n}\n"],"sourceRoot":"/source/"}