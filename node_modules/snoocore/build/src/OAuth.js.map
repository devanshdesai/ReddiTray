{"version":3,"sources":["OAuth.js"],"names":[],"mappings":"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","file":"OAuth.js","sourcesContent":["import events from 'events';\nimport querystring from 'querystring';\nimport util from 'util';\nimport urlLib from 'url';\n\nimport when from 'when';\n\nimport * as u from './utils';\n\nimport Endpoint from './Endpoint';\nimport ResponseError from './ResponseError';\n\n/*\n   Various OAuth types\n */\nexport const TOKEN = {\n  EXPLICIT: 'explicit',\n  IMPLICIT: 'implicit',\n  SCRIPT: 'script',\n  APP_ONLY: 'app_only',\n  REFRESH: 'refresh',\n  INVALID: 'invalid_token' // Represents an unset/invalid token\n};\n\n/*\n   Represents a single OAuth instance. Used primarily for internal\n   use within the Snoocore class to manage two OAuth instances -\n   Applicaton Only and an Authenticated Session.\n\n */\nexport default class OAuth extends events.EventEmitter {\n\n  constructor(userConfig, request) {\n    super();\n\n    this._userConfig = userConfig;\n\n    this._request = request;\n\n    this.accessToken = TOKEN.INVALID;\n    this.refreshToken = TOKEN.INVALID;\n    this.tokenType = 'bearer';\n\n    this.scope = this.normalizeScope();\n  }\n\n  /*\n     Takes a given scope, and normalizes it to a proper string.\n   */\n  normalizeScope() {\n    let scope;\n    // Set to empty string if the scope if not set\n    if (typeof this._userConfig.oauth.scope === 'undefined') {\n      scope = '';\n    }\n    // convert an array into a string\n    else if (util.isArray(this._userConfig.oauth.scope)) {\n      scope = this._userConfig.oauth.scope.join(',');\n    }\n    return scope;\n  }\n\n  /*\n     Do we have a refresh token defined?\n   */\n  hasRefreshToken() {\n    return this.refreshToken !== TOKEN.INVALID;\n  }\n\n  /*\n     Do we have an access token defined?\n   */\n  hasAccessToken() {\n    return this.accessToken !== TOKEN.INVALID;\n  }\n\n  /*\n     Get the current refresh token used for this instance.\n   */\n  getRefreshToken() {\n    if (this.refreshToken === TOKEN.INVALID) {\n      return undefined;\n    }\n    return this.refreshToken;\n  }\n\n  /*\n     Get the current access token used for this instance.\n   */\n  getAccessToken() {\n    if (this.accessToken === TOKEN.INVALID) {\n      return undefined;\n    }\n    return this.accessToken;\n  }\n\n  /*\n     Set the current refresh token used for this instance.\n   */\n  setRefreshToken(refreshToken) {\n    this.refreshToken = refreshToken;\n  }\n\n  /*\n     Set the current access token used for this instance.\n   */\n  setAccessToken(accessToken) {\n    this.accessToken = accessToken;\n  }\n\n  getAuthorizationHeader() {\n    return `${this.tokenType} ${this.accessToken}`;\n  }\n\n  /*\n     Can we refresh our access token without user intervention?\n   */\n  canRefreshAccessToken() {\n    return (this._userConfig.oauth.type === 'script') ||\n           (this._userConfig.oauth.type === 'explicit' &&\n             this._userConfig.oauth.duration === 'permanent' &&\n             this.hasRefreshToken());\n  }\n\n  /*\n     Get the Explicit Auth Url.\n   */\n  getExplicitAuthUrl(state) {\n\n    let query = {};\n\n    query.client_id = this._userConfig.oauth.key;\n    query.state = u.thisOrThat(state, Math.ceil(Math.random() * 1000));\n    query.redirect_uri = this._userConfig.oauth.redirectUri;\n    query.duration = this._userConfig.oauth.duration;\n    query.response_type = 'code';\n    query.scope = this.scope;\n\n    let baseUrl = `https://${this._userConfig.serverWWW}/api/v1/authorize`;\n\n    if (this._userConfig.mobile) {\n      baseUrl += '.compact';\n    }\n\n    return baseUrl + '?' + querystring.stringify(query);\n  }\n\n  /*\n     Get the Implicit Auth Url.\n   */\n  getImplicitAuthUrl(state) {\n\n    let query = {};\n\n    query.client_id = this._userConfig.oauth.key;\n    query.state = u.thisOrThat(state, Math.ceil(Math.random() * 1000));\n    query.redirect_uri = this._userConfig.oauth.redirectUri;\n    query.response_type = 'token';\n    query.scope = this.scope;\n\n    let baseUrl = `https://${this._userConfig.serverWWW}/api/v1/authorize`;\n\n    if (this._userConfig.mobile) {\n      baseUrl += '.compact';\n    }\n\n    return baseUrl + '?' + querystring.stringify(query);\n  }\n\n  getAuthUrl(state) {\n    switch(this._userConfig.oauth.type) {\n      case TOKEN.EXPLICIT:\n        return this.getExplicitAuthUrl(state);\n      case TOKEN.IMPLICIT:\n        return this.getImplicitAuthUrl(state);\n      default:\n        throw new Error(\n          `The oauth type of ${oauthType} does not require an url`);\n    }\n  }\n\n  /*\n     Returns the data needed to request an Applicaton Only\n     OAuth access token.\n   */\n  getAppOnlyTokenData() {\n    let params = {};\n\n    params.scope = this.scope;\n\n    // From the reddit documentation:\n    //\n    // - - -\n    // \"client_credentials\"\n    //\n    // Confidential clients (web apps / scripts) not acting on\n    // behalf of one or more logged out users.\n    //\n    // - - -\n    // \"https://oauth.reddit.com/grants/installed_client\"\n    //\n    // * Installed app types (as these apps are considered\n    // \"non-confidential\", have no secret, and thus, are\n    // ineligible for client_credentials grant.\n    //\n    // * Other apps acting on behalf of one or more \"logged out\" users.\n    //\n    switch(this._userConfig.oauth.type) {\n      case TOKEN.SCRIPT:\n      case TOKEN.EXPLICIT:\n        params.grant_type = 'client_credentials';\n        break;\n        // Also covers case TOKEN.IMPLICIT:\n      default:\n        params.grant_type = 'https://oauth.reddit.com/grants/installed_client';\n        params.device_id = this._userConfig.oauth.deviceId;\n    }\n\n    return params;\n  }\n\n  /*\n     Returns the data needed to request an authenticated OAuth\n     access token.\n   */\n  getAuthenticatedTokenData(authorizationCode) {\n    let params = {};\n\n    params.scope = this.scope;\n\n    switch (this._userConfig.oauth.type) {\n      case TOKEN.SCRIPT:\n        params.grant_type = 'password';\n        params.username = this._userConfig.oauth.username;\n        params.password = this._userConfig.oauth.password;\n        break;\n      case TOKEN.EXPLICIT:\n        params.grant_type = 'authorization_code';\n        params.client_id = this._userConfig.oauth.key;\n        params.redirect_uri = this._userConfig.oauth.redirectUri;\n        params.code = authorizationCode;\n        break;\n      default:\n        return when.reject(new Error(\n          'Invalid OAuth type specified (Authenticated OAuth).'));\n    }\n\n    return params;\n  }\n\n  /*\n     Returns the data needed to request a refresh token.\n   */\n  getRefreshTokenData(refreshToken) {\n    let params = {};\n    params.scope = this.scope;\n    params.grant_type = 'refresh_token';\n    params.refresh_token = refreshToken;\n    return params;\n  }\n\n  /*\n     A method that sets up a call to receive an access/refresh token.\n   */\n  getToken(tokenEnum, options={}) {\n\n    let params;\n\n    switch(tokenEnum) {\n      case TOKEN.REFRESH:\n        params = this.getRefreshTokenData(options.refreshToken);\n        break;\n      case TOKEN.APP_ONLY:\n        params = this.getAppOnlyTokenData();\n        break;\n      case TOKEN.SCRIPT:\n      case TOKEN.EXPLICIT:\n        params = this.getAuthenticatedTokenData(options.authorizationCode);\n        break;\n    }\n\n    let headers = {};\n    let buff = new Buffer(this._userConfig.oauth.key + ':' +\n                          this._userConfig.oauth.secret);\n    let base64 = (buff).toString('base64');\n    let auth = `Basic ${base64}`;\n\n    headers['Authorization'] = auth;\n\n    let endpoint = new Endpoint(this._userConfig,\n                                this._userConfig.serverWWW,\n                                'post',\n                                '/api/v1/access_token',\n                                headers,\n                                params,\n                                {},\n                                this._userConfig.serverWWWPort);\n\n    let responseErrorHandler = (response, endpoint) => {\n      if (String(response._status).indexOf('4') === 0) {\n        return when.reject(new ResponseError(\n          'Invalid getToken request', response, endpoint));\n      }\n      // else return the endpoint to try again\n      return when.resolve(endpoint);\n    };\n    \n    return this._request.https(endpoint, responseErrorHandler).then(res => {\n      return JSON.parse(res._body);\n    });\n  }\n\n  /*\n     Sets the auth data from the oauth module to allow OAuth calls.\n\n     This method can authenticate with:\n\n     - Script based OAuth (no parameter)\n     - Raw authentication data\n     - Authorization Code (request_type = \"code\")\n     - Access Token (request_type = \"token\") / Implicit OAuth\n     - Application Only. (void 0, true);\n   */\n  auth(authCodeOrAccessToken, isApplicationOnly) {\n    let tokenData;\n\n    if (isApplicationOnly) {\n      tokenData = this.getToken(TOKEN.APP_ONLY);\n    } else {\n\n      let token = this._userConfig.oauth.type;\n\n      switch(token) {\n        case TOKEN.SCRIPT:\n          tokenData = this.getToken(token);\n          break;\n\n        case TOKEN.EXPLICIT:\n          // auth code in this case\n          tokenData = this.getToken(token, {\n            authorizationCode: authCodeOrAccessToken\n          });\n          break;\n\n        case TOKEN.IMPLICIT:\n          // access token in this case\n          tokenData = {\n            access_token: authCodeOrAccessToken,\n            token_type: 'bearer',\n            expires_in: 3600,\n            scope: this._userConfig.oauth.scope\n          };\n          break;\n\n        default:\n          throw new Error('Setting the auth data is no longer supported.');\n      }\n    }\n\n    return when(tokenData).then(data => {\n\n      if (typeof data !== 'object') {\n        let str = String(data);\n        return when.reject(new Error(\n          `There was a problem authenticating:\\n${str}`));\n      }\n\n      this.accessToken = data.access_token;\n      this.tokenType = data.token_type;\n\n      // If the explicit app used a perminant duration, send\n      // back the refresh token that will be used to re-authenticate\n      // later without user interaction.\n      if (data.refresh_token) {\n        // set the internal refresh token for automatic expiring\n        // access_token management\n        this.refreshToken = data.refresh_token;\n        return this.refreshToken;\n      }\n    });\n  }\n\n  /*\n     Only authenticates with Application Only OAuth\n   */\n  applicationOnlyAuth() {\n    return this.auth(void 0, true);\n  }\n\n  /*\n     Authenticate with a refresh token.\n   */\n  refresh(refreshToken) {\n\n    // use the provided refresh token, or the current\n    // one that we have for this class\n    refreshToken = u.thisOrThat(refreshToken, this.refreshToken);\n\n    return this.getToken(TOKEN.REFRESH, {\n      refreshToken: refreshToken\n    }).then(data => {\n      // only set the internal refresh token if reddit\n      // agrees that it was OK and sends back authData\n      this.refreshToken = refreshToken;\n\n      this.accessToken = data.access_token;\n      this.tokenType = data.token_type;\n\n      this.emit('access_token_refreshed', this.accessToken);\n    });\n  }\n\n  /*\n     Clears any authentication data & removes OAuth authentication\n\n     By default it will only remove the \"access_token\". Specify\n     the users refresh token to revoke that token instead.\n   */\n  deauth(refreshToken) {\n\n    // no need to deauth if not authenticated\n    if (!this.hasAccessToken()) {\n      return when.resolve();\n    }\n\n    let isRefreshToken = typeof refreshToken === 'string';\n\n    let token = isRefreshToken ? refreshToken : this.accessToken;\n\n    let tokenTypeHint = isRefreshToken ? 'refresh_token' : 'access_token';\n\n    let params = {\n      token: token,\n      token_type_hint: tokenTypeHint\n    };\n\n    let auth = 'Basic ' + (new Buffer(\n      this._userConfig.oauth.key + ':' +\n      this._userConfig.oauth.secret)).toString('base64');\n\n    let headers = {\n      'Authorization': auth\n    };\n\n    let endpoint = new Endpoint(this._userConfig,\n                                this._userConfig.serverWWW,\n                                'post',\n                                '/api/v1/revoke_token',\n                                headers,\n                                params,\n                                {},\n                                this._userConfig.serverWWWPort);\n\n    return this._request.https(endpoint).then(response => {\n      // If we did not get back a 204 this then it did not sucessfully\n      // revoke the token\n      if (response._status !== 204) {\n        return when.reject(new Error('Unable to revoke the given token'));\n      }\n\n      // clear the data for this OAuth object\n      this.accessToken = TOKEN.INVALID;\n      this.tokenType = TOKEN.INVALID;\n\n      // only clear the refresh token if one was provided\n      if (isRefreshToken) {\n        this.refreshToken = TOKEN.INVALID;\n      }\n    });\n  }\n\n}\n"],"sourceRoot":"/source/"}