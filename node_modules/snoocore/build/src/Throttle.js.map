{"version":3,"sources":["Throttle.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;oBAaiB,MAAM;;;;yBACL,YAAY;;;;IAET,QAAQ;AAEhB,WAFQ,QAAQ,GAEE;QAAjB,UAAU,yDAAC,IAAI;;0BAFR,QAAQ;;AAIzB,QAAI,CAAC,WAAW,GAAG,UAAU,CAAC;;;;;;;;AAS9B,QAAI,CAAC,cAAc,GAAG,CAAC,CAAC;GACzB;;eAdkB,QAAQ;;WAgBvB,gBAAG;;;;AAEL,UAAI,YAAY,GAAG,4BAAM,IAAI,CAAC,cAAc,CAAC,CAAC;;;AAG9C,UAAI,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,CAAC;;;;AAIxC,gBAAU,CAAC,YAAK;AACd,cAAK,cAAc,IAAI,MAAK,WAAW,CAAC;OACzC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;;AAErB,aAAO,YAAY,CAAC;KACrB;;;;;;;WAKM,iBAAC,MAAM,EAAE;AACd,UAAI,CAAC,cAAc,IAAI,MAAM,CAAC;KAC/B;;;SArCkB,QAAQ;;;qBAAR,QAAQ","file":"Throttle.js","sourcesContent":["/*\n   A basic throttle manager. Exposes 1 functoin `wait` that\n   will return a promise that resolves once we've waited the proper\n   amount of time, e.g.\n\n   var throttle = new Throttle();\n\n   throttle.wait() // resolves after 1ms\n   throttle.wait() // resolves after 10001ms\n   throttle.wait() // resolves after 2001ms\n\n */\n\nimport when from 'when';\nimport delay from 'when/delay';\n\nexport default class Throttle {\n\n  constructor(throttleMs=1000) {\n\n    this._throttleMs = throttleMs;\n\n    /*\n       The current throttle delay before a request will go through\n       increments every time a call is made, and is reduced when a\n       call finishes.\n\n       Time is added & removed based on the throttle variable.\n     */\n    this._throttleDelay = 1;\n  }\n\n  wait() {\n    // resolve this promise after the current throttleDelay\n    let delayPromise = delay(this._throttleDelay);\n\n    // add throttleMs to the total throttleDelay\n    this._throttleDelay += this._throttleMs;\n\n    // after throttleMs time, subtract throttleMs from\n    // the throttleDelay\n    setTimeout(()=> {\n      this._throttleDelay -= this._throttleMs;\n    }, this._throttleMs);\n\n    return delayPromise;\n  }\n\n  /*\n     Time in milliseconds to add to the throttle delay\n  */\n  addTime(timeMs) {\n    this._throttleDelay += timeMs;\n  }\n}\n"],"sourceRoot":"/source/"}