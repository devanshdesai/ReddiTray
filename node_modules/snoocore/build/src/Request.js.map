{"version":3,"sources":["Request.js"],"names":[],"mappings":"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","file":"Request.js","sourcesContent":["import querystring from 'querystring';\nimport events from 'events';\n\nimport when from 'when';\nimport delay from 'when/delay';\n\nimport * as u from './utils';\n\nimport ResponseError from './ResponseError';\n\nimport httpsNode from './https/httpsNode';\nimport httpsBrowser from './https/httpsBrowser';\n\nconst rawHttps = u.isNode() ? httpsNode : httpsBrowser;\n\nexport default class Request extends events.EventEmitter {\n\n  constructor (throttle) {\n    super();\n    this._throttle = throttle;\n  }\n\n  /*\n     Makes an https call with a given endpoint.\n\n     If an error handler is provided, it will call it in\n     the case of a returned status that is not 2xx / success.\n\n     If the errorHandler results in a rejected promise, then we will NOT\n     retry the endpoint and reject with the given error.\n   */\n  https(endpoint, responseErrorHandler) {\n    return this._throttle.wait().then(()=> {\n\n      let reqOptions = {\n        method: endpoint.method.toUpperCase(),\n        hostname: endpoint.hostname,\n        path: endpoint.computedPath,\n        headers: endpoint.headers,\n        useBrowserCookies: endpoint._userConfig.useBrowserCookies\n      };\n\n      // @TODO Node.js has issues if you set it to 80?\n      if (endpoint.port !== 80) {\n        reqOptions.port = endpoint.port;\n      }\n\n      let formData = endpoint.args;\n\n      return rawHttps(reqOptions, formData).timeout(\n        endpoint.contextOptions.requestTimeout,\n        new ResponseError('The request has timed out', {}, endpoint)\n      ).then(response => {\n\n        let statusChar = String(response._status).substring(0, 1);\n        let success = statusChar === '2';\n\n        // If success we're done!\n        if (success) {\n          return response;\n        }\n\n        // Else, retry the endpoint if we can.\n        endpoint.contextOptions.retryAttemptsLeft--;\n\n        let responseError;\n        responseError = new ResponseError('Response Error',\n                                          response,\n                                          endpoint);\n\n        this.emit('response_error', responseError);\n\n        if (endpoint.contextOptions.retryAttemptsLeft <= 0) {\n          responseError.message = ('All retry attempts exhausted.\\n\\n' +\n                                   responseError.message);\n          return when.reject(responseError);\n        }\n\n        // Use the given response error handler, or use a thin wrapper that\n        // will return the endpoint without any modifications\n        responseErrorHandler = responseErrorHandler || function(response, endpoint) {\n          return when.resolve(endpoint);\n        };\n\n        // Call the error handler. If not rejected, retry the endpoint\n        // with any modifications made by the responseErrorHandler\n        return responseErrorHandler(response, endpoint).then(modifiedEndpoint => {\n\n          // Only have a retry delay if the endpoint had an HTTP 5xx status\n          let retryDelay = (statusChar === '5') ?\n                           modifiedEndpoint.contextOptions.retryDelay :\n                           0;\n\n          return delay(retryDelay).then(()=> {\n            return this.https(modifiedEndpoint, responseErrorHandler);\n          });\n        });\n      });\n\n    });\n  }\n}\n"],"sourceRoot":"/source/"}