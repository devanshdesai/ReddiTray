{"version":3,"sources":["Snoocore.js"],"names":[],"mappings":"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","file":"Snoocore.js","sourcesContent":["// Node.js libraries\nimport events from 'events';\nimport util from 'util';\n\n// Our modules\nimport Request from './Request';\nimport RedditRequest from './RedditRequest';\nimport Throttle from './Throttle';\nimport UserConfig from './UserConfig';\nimport OAuth from './OAuth';\nimport Modhash from './Modhash';\nimport fileHelper from './https/file';\n\nexport default class Snoocore extends events.EventEmitter {\n\n  static get version() {\n    return '3.2.0';\n  }\n\n  static file(...args) {\n    return fileHelper(...args);\n  }\n\n  constructor(userConfiguration) {\n    super();\n\n    // @TODO - this is a \"god object\" of sorts.\n    this._userConfig = new UserConfig(userConfiguration);\n\n    this._throttle = new Throttle(this._userConfig.throttle);\n\n    this._request = new Request(this._throttle);\n\n    this._request.on('response_error', (responseError) => {\n      this.emit('response_error', responseError);\n    });\n\n    // Two OAuth instances. One for authenticated users, and another for\n    // Application only OAuth. Two are needed in the instance where\n    // a user wants to bypass authentication for a call - we don't want\n    // to waste time by creating a new app only instance, authenticating,\n    // etc.\n    this.oauth = new OAuth(this._userConfig, this._request);\n    this.oauthAppOnly = new OAuth(this._userConfig, this._request);\n\n    // Expose OAuth functions in here\n    [ 'getExplicitAuthUrl',\n      'getImplicitAuthUrl',\n      'getAuthUrl',\n      'auth',\n      'refresh',\n      'deauth',\n      'getRefreshToken',\n      'getAccessToken',\n      'setRefreshToken',\n      'setAccessToken',\n      'hasRefreshToken',\n      'hasAccessToken'\n    ].forEach(fn => { this[fn] = this.oauth[fn].bind(this.oauth); });\n\n    if (this._userConfig.useBrowserCookies) {\n      this.modhash = new Modhash(this._userConfig, this._request);\n\n      // Expose Modhash functions in here\n      [ 'isModhashOld',\n        'setModhash',\n        'getModhash',\n        'getCurrentModhash',\n        'refreshModhash'\n      ].forEach(fn => { this[fn] = this.modhash[fn].bind(this.modhash); });\n    }\n\n    this.appOnlyAuth = this.oauthAppOnly.applicationOnlyAuth.bind(this.oauthAppOnly);\n\n    // Bubble up the  events\n    this.oauth.on('access_token_refreshed', (accessToken) => {\n      this.emit('access_token_refreshed', accessToken);\n    });\n\n\n    this._redditRequest = new RedditRequest(this._userConfig,\n                                            this._request,\n                                            this.oauth,\n                                            this.oauthAppOnly,\n                                            this.modhash);\n\n    this._redditRequest.on('access_token_expired', (responseError) => {\n      this.emit('access_token_expired', responseError);\n    });\n\n    this._redditRequest.on('rate_limit', (rateLimitData) => {\n      this.emit('rate_limit', rateLimitData);\n    });\n\n    this._redditRequest.on('rate_limit_reached', (rateLimitData) => {\n      // let the user know that they have gone over\n      this.emit('rate_limit_reached', rateLimitData);\n      // Delay the next call until the rate limit reset occurs\n      this._throttle.addTime(rateLimitData.rateLimitReset * 1000);\n    });\n\n    /*\n       Make this._redditRequest.path the primary function that we return, but\n       stick the rest of the available functions on the prototype so we\n       can use them as well.\n     */\n    let path = this._redditRequest.path.bind(this._redditRequest);\n\n    let key;\n    for (key in this) {\n      path[key] = this[key];\n    }\n\n    return path;\n  }\n}\n"],"sourceRoot":"/source/"}